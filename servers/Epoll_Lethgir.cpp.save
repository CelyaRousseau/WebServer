#include "Epoll.h"
#include "epollStructs.cpp"

int Epoll::run(BasicSocket * mySock) {
	if(message()) return 0;
	int sfd, s;
	int efd;
	struct epoll_event event;
	struct epoll_event *events;
	efd = epoll_create1 (0);
	event.data.fd = sfd;
	event.events = EPOLLIN | EPOLLET;
	s = epoll_ctl (efd, EPOLL_CTL_ADD, sfd, &event);
	events = calloc (MAXEVENTS, sizeof event);

	while (mySock->sockAccept()) {

		if(mySock->getSocketClient() > 0) {
			cout << "Connection accepted" << endl;
			int n, i;
      			n = epoll_wait (efd, events, MAXEVENTS, -1);
			if (sfd == events[i].data.fd) {
				event.data.fd = infd;
				event.events = EPOLLIN | EPOLLET;
				s = epoll_ctl (efd, EPOLL_CTL_ADD, infd, &event);

			}

		} else cout << "Connection refused";
	}
}

// set return state to 0 when code is implemented
int Epoll::message() {
	cout << "Start thread pool server" << endl;
	return 0;
	cout << "not yet implemented" << endl;
	return 1;
}

void * Epoll::runFunction(void * paramMaybeUseless) {
	((BasicSocket *)socket)->socket_handler();
}
